{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[j] - numbers[i]) <= threshold:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"}
{"task_id": "HumanEval/1", "completion": "    paren_strings = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == ')':\n            paren_strings.append(current_group)\n            current_group = ''\n        else:\n            current_group += char\n\n    return paren_strings"}
{"task_id": "HumanEval/2", "completion": "# Floor divide by 1 to get rid of decimals and floor to get only integer part\n    number_with_integer_part = int(number // 1)\n    return abs(number - number_with_integer_part)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n\n    for operation in operations:\n        if operation < 0:\n            return True\n        else:\n            balance += operation\n\n    if balance < 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/4", "completion": "    sum: float = 0.0\n    for number in numbers:\n        sum += abs(number - statistics.mean(numbers))\n    return sum / len(numbers)\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    median: float = statistics.median(numbers)\n    sum: float = 0.0\n    for number in numbers:\n        sum += abs(number - median)\n    return sum / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "# We can do it with list comprehensions but that's not the point of this exercise\n    result = []\n    for index, number in enumerate(numbers):\n        if index + 1 < len(numbers):\n            result.append(number)\n            result.append(delimeter)\n        else:\n            # Don't forget about the last element\n            result.append(number)\n\n    return result"}
{"task_id": "HumanEval/6", "completion": "# Parse string to get list of groups\n    group_list = paren_string.strip().split(\" \")\n\n    return [max(len(group.replace('(', '').replace(')', '')) for group in group_list[i:]) for i in range(0, len(group_list))]"}
{"task_id": "HumanEval/7", "completion": "    return list(filter(lambda s: substring in s, strings))"}
{"task_id": "HumanEval/8", "completion": "    return sum(numbers), reduce((lambda x, y: x * y), numbers, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/9", "completion": "# Initialize variables that will be used in the loop below.\n    max_element = numbers[0]\n    rolling_maximums: List[int] = []\n\n    for i, number in enumerate(numbers):\n        if number > max_element:\n            max_element = number\n\n        # The first element of the result list is always equal to the first element of the input list.\n        if i == 0:\n            rolling_maximums.append(max_element)\n        else:\n            rolling_maximums.append(max_element)\n\n    return rolling_maximums\n\n\ndef get_peaks(numbers: List[int],\n            tolerance: int = 2,\n            ) -> List[Tuple[int]]:\n    \"\"\" Find all local peaks in a list of integers.\n    A local peak is defined as a value that has two neighbors with lower values.\n    The function also allows for some tolerance value to be set, which means that if the difference between\n    neighboring elements is equal or less than tolerance, then they are considered as local peaks.\n    :param numbers:\n    :param tolerance:\n    :return: list of tuples (index_of_the_peak, value_at_the_peak)\n    >>> get_peaks([1, 2, 3, 4, 5, 6, 7, 8])\n    [(0, 1), (1, 2), (2, 3)]\n    \"\"\"\n\n    peaks = []\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] > numbers[i]:\n            continue\n\n        # Check if the peak is surrounded by neighbors with lower values.\n        if i == 0:\n            if numbers[i] > numbers[i + 1] and numbers[i] - numbers[i + 1] > tolerance:\n                peaks.append((i, numbers[i]))\n        elif i == len(numbers) - 2:\n            if numbers[i] > numbers[i - 1] and numbers[i - 1] - numbers[i] > tolerance:\n                peaks.append((i + 1, numbers[i + 1]))\n        else:\n            if (numbers[i] > numbers[i - 1]) and \\\n                    (numbers[i] > numbers[i + 1]) and \\\n                    (numbers[i - 1] - numbers[i] > tolerance) and \\\n                    (numbers[i + 1] - numbers[i] > tolerance):\n                peaks.append((i, numbers[i]))\n\n    return peaks"}
{"task_id": "HumanEval/10", "completion": "# find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[i:][::-1]\n\n    # all combinations are not palindromes so the last one won't work\n    raise RuntimeError('Input is too short to be a palindrome')"}
{"task_id": "HumanEval/11", "completion": "    if len(a) != len(b):\n        raise ValueError(\"The strings should have the same length\")\n\n    # Create a list of bits (ones and zeroes) from input strings\n    # If the bit is 1, the number will be 1. Otherwise it is 0.\n    bits_a = [int(x) for x in a]\n    bits_b = [int(x) for x in b]\n\n    # Perform XOR on these lists and return result as a string\n    return \"\".join([str((x ^ y)) for (x, y) in zip(bits_a, bits_b)])\n\n\ndef solve(n: int = 12) -> List[int]:\n    \"\"\" Find the first n distinct positive integers that are not sums of two abundant numbers.\n    A number n is called an abundant number if its sum of proper divisors exceeds its value.\n    We only consider integers up to n, since all larger ones can be obtained as a sum of previous results.\n    >>> solve(n=12)\n    [7, 5, 3, 2]\n    \"\"\"\n\n    # Create a list of abundant numbers\n    abundants = []\n    for i in range(1, n):\n        if sum([j for j in range(1, int(i ** 0.5) + 1) if i % j == 0]) > i:\n            abundants.append(i)\n    print(\"Abundant numbers up to {}\".format(n))\n    print(abundants)\n\n    # Find pairs of abundant numbers that sum to a number below n.\n    # If there are no such pairs, we can return the first n distinct integers > 1.\n    nums = []\n    for i in range(len(abundants)):\n        for j in range(i+1, len(abundants)):\n            if abundants[j] - abundants[i] < n:\n                # The sum of these two numbers is below n. We can return the first n distinct integers > 1.\n                nums = [x for x in range(2, n+1)]\n                print(\"Pairs found.\")\n                break\n        if len(nums) != 0:\n            break\n    else:\n        # No pairs were found. We can return the first n distinct integers > 1.\n        nums = [x for x in range(2, n+1)]\n        print(\"No pairs found. Using all numbers.\")\n\n    # Find numbers that are not sums of two abundant numbers.\n    result = []\n    for num in nums:\n        for a, b in combinations(abundants, 2):\n            if string_xor(str(a), str(b)) == str(num):\n                # If this number is already present in the result, we can skip it.\n                break\n        else:\n            # If this number was not found in the list of pairs, add it to the result.\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(\"First 12 distinct positive integers that are not sums of two abundant numbers:\")\n    print(solve(n=12))\n    print(\"\\nFirst 50 distinct positive integers that are not sums of two abundant numbers:\")\n    print(solve(n=50))"}
{"task_id": "HumanEval/12", "completion": "    longest_string: Optional[str] = None\n    max_length: int = -1\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b != 0:\n        a %= b\n        b = a ^ b\n        a ^= b\n\n    return abs(a)"}
{"task_id": "HumanEval/14", "completion": "    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "completion": "# Fill this in.\n    return \" \".join(str(x) for x in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "completion": "if __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/18", "completion": "# Find out the total number of matches\n    num_matches = len(string) - len(substring) + 1\n\n    # Count the number of matches that have no overlaping characters with the next character\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            start, end = i, min(i + len(substring), len(string))\n            num_matches -= sum(1 for j in range(start + 1, end) if string[j - 1] == substring[0])\n    return num_matches"}
{"task_id": "HumanEval/19", "completion": "    return \" \".join(sorted([x for x in numbers.split(\" \") if x in ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine')]))\n\ndef split_a_string(s: str) -> List[str]:\n    \"\"\"Input is a string with no spaces and only letters. Return a list of strings where each string is one letter long\"\"\"\n    return [s[i:i+1] for i in range(len(s))]\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"}
{"task_id": "HumanEval/20", "completion": "# Sort the numbers to ensure that the first number is always smaller than the second number\n    sorted_numbers = sorted(numbers)\n\n    # Get the index of each number in the list such that sorted_numbers[index] == number and number is the smallest\n    # number greater than 0 (if it exists)\n    smallest_greater_than_zero_number_index = next((i for i, n in enumerate(sorted_numbers) if n > 0), None)\n    largest_less_than_or_equal_to_zero_number_index = -1\n\n    # Get the index of each number in the list such that sorted_numbers[index] == number and number is the largest\n    # number less than or equal to zero (if it exists)\n    if smallest_greater_than_zero_number_index:\n        largest_less_than_or_equal_to_zero_number_index = -1 * next(\n            (i for i, n in enumerate(sorted_numbers[::-1]) if n <= 0), None)\n\n    # Ensure that the smallest number is always smaller than the largest number and return them in order\n    if largest_less_than_or_equal_to_zero_number_index >= 0:\n        if (smallest_greater_than_zero_number_index - largest_less_than_or_equal_to_zero_number_index) > 1:\n            return (sorted_numbers[largest_less_than_or_equal_to_zero_number_index], sorted_numbers[smallest_greater_than_zero_number_index])\n        else:\n            return (sorted_numbers[smallest_greater_than_zero_number_index], sorted_numbers[largest_less_than_or_equal_to_zero_number_index])\n    elif smallest_greater_than_zero_number_index:\n        return (sorted_numbers[smallest_greater_than_zero_number_index], sorted_numbers[smallest_greater_than_zero_number_index - 1])\n    else:\n        raise Exception(\"No positive number in the list\")"}
{"task_id": "HumanEval/21", "completion": "    min_value = min(numbers)\n    max_value = max(numbers)\n    scale_factor = (max_value - min_value) / (len(numbers) - 1)\n\n    rescaled = []\n\n    for i in range(0, len(numbers)):\n        rescaled.append((numbers[i] - min_value) / scale_factor)\n\n    return rescaled\n\n\ndef rescale_to_unit_interval(number: float) -> float:\n    \"\"\" Given a single number, apply a linear transform to that value, such that the smallest\n    possible input will become 0 and the largest will become 1. This is useful if you want to\n    scale an image's pixel values, for example.\n    >>> rescale_to_unit_interval(1.0)\n    0.0\n    >>> rescale_to_unit_interval(-2.0)\n    -1.0\n    \"\"\"\n\n    min_value = float(number)\n    max_value = abs(number)\n    scale_factor = (max_value - min_value) / 2.0\n\n    return (number + max_value) / scale_factor\n\n\ndef rescale_from_unit_interval(number: float, lower: float, upper: float) -> float:\n    \"\"\" Given a single number representing value in [0, 1] interval, map it to given range. This is useful if you want to apply any transformation that needs to be scaled relative to the whole range of values, for example.\n    >>> rescale_from_unit_interval(0.5, -1.0, 1.0)\n    0.0\n    \"\"\"\n    return lower + number * (upper - lower)\n\n\ndef clip_to_unit(number: float) -> float:\n    \"\"\" Given a single number, clip it to be within the [-1, 1] range.\n    >>> clip_to_unit(-200.0)\n    -1.0\n    >>> clip_to_unit(200.0)\n    1.0\n    \"\"\"\n    return max(min(number, 1), -1)"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/25", "completion": "# TODO: implement your solution here!\n    factors = []\n\n    while n % 2 == 0:\n        n //= 2\n        factors.append(2)\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "# A set to store the unique numbers and another list for the output.\n    seen = set()\n    result = []\n\n    # Iterate through the input numbers\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n\n    return result"}
{"task_id": "HumanEval/27", "completion": "    res = ''\n\n    for char in string:\n        if char == char.lower():\n            res += char.upper()\n        else:\n            res += char.lower()\n    \n    return res"}
{"task_id": "HumanEval/28", "completion": "    return \"\".join(strings)"}
{"task_id": "HumanEval/29", "completion": "# write your code here\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "# if the number is not > 1, it can't be prime\n    if n <= 1:\n        return False\n    \n    i = 2\n    \n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n        \n    return True"}
{"task_id": "HumanEval/32", "completion": "    if len(xs) % 2 == 1:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    n = int((len(xs) - 1) / 2)\n\n    def f(x):\n        return poly(xs, x)\n\n    def fp(x):\n        return sum([coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs[n:])])\n\n    def fpp(x):\n        return sum([math.pow(x, i - 2) * (i - 1) * coeff for i, coeff in enumerate(xs[n:])])\n\n    x0 = 0\n    while abs(f(x0)) > 1e-5:\n        if fp(x0) == 0:\n            raise ValueError(\"Polynomial is not differentiable at zero.\")\n        dx = -f(x0) / fp(x0)\n        x0 += dx\n    return x0"}
{"task_id": "HumanEval/33", "completion": "    def sort_second(l: list):\n        \"\"\"This function takes a list l and returns a list l' such that\n        l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n        to the values of the corresponding indicies of l, but sorted.\n        >>> sort_second([1, 2, 3])\n        [1, 2, 3]\n        \"\"\"\n\n        def sort_first(l: list):\n            \"\"\"This function takes a list l and returns a list l' such that\n            l' is identical to l in the indicies that are not divisible by one, while its values at the indicies that are divisible by one are equal\n            to the values of the corresponding indicies of l, but sorted.\n            >>> sort_first([1, 2, 3])\n            [1, 2, 3]\n            \"\"\"\n        pass\n    pass"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "    if len(l) == 0:\n        raise ValueError('List is empty.')\n    elif len(l) == 1:\n        return l[0]\n    else:\n        result = l[0]\n        for i in range(len(l)):\n            if l[i] > result:\n                result = l[i]\n        return result"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": ""}
{"task_id": "HumanEval/38", "completion": "# split s to groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer than 3 elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in reversed(groups)]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "    def isprime(n):\n        if n == 1:\n            return False\n\n        for i in range(2, int(n ** 0.5 + 1)):\n            if n % i == 0:\n                return False\n\n        return True\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        while not isprime(a) or not isprime(b):\n            a, b = b, a + b\n\n    return a"}
{"task_id": "HumanEval/40", "completion": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "completion": "# If there are 2 cars, then there is no collision.\n    if n == 2:\n        return 0\n\n    left = [1] * n\n    right = [1] * n\n\n    for i in range(n):\n        if i % 2 == 0:\n            left[i] = -1\n        else:\n            right[i] = -1\n\n    collisions = 0\n    while True:\n        # First, all cars move forward.\n        for i in range(n):\n            if i % 2 == 0:\n                left[i] += 1\n            else:\n                right[i] += 1\n\n        # Now, check if they collide.\n        for i in range(n):\n            if i % 2 == 0:\n                left_car = left[i]\n            else:\n                left_car = -left[i]\n\n            for j in range(n):\n                if j % 2 == 1:\n                    right_car = right[j]\n                else:\n                    right_car = -right[j]\n\n                # If they meet.\n                if left_car == right_car and i != j:\n                    collisions += 1\n                    return collisions"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    else:\n        return False\n\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    return any(l[i] + l[j] == 0 for i in range(len(l)) for j in range(i + 1, len(l)))"}
{"task_id": "HumanEval/44", "completion": "    if not isinstance(x, int):\n        raise TypeError(\"Input must be an integer.\")\n    if not isinstance(base, int):\n        raise TypeError(\"Base must be an integer.\")\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n\n    string_representation = []\n\n    while x != 0:\n        x, remainder = divmod(x, base)\n        string_representation.append(str(remainder))\n\n    return \"\".join(string_representation[::-1])"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2"}
{"task_id": "HumanEval/46", "completion": "    def test_fib4():\n    assert fib4(0) == 0, \"Wrong result.\"\n    assert fib4(1) == 0, \"Wrong result.\"\n    assert fib4(2) == 2, \"Wrong result.\"\n    assert fib4(3) == 0, \"Wrong result.\"\n    assert fib4(6) == 8, \"Wrong result.\"\n    assert fib4(7) == 14, \"Wrong result.\""}
{"task_id": "HumanEval/47", "completion": "    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[(len(l)) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "# https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left_binary_method\n    x = 2 ** n\n    y = p - 1\n    z = 1\n    while y & 1 == 0:\n        y >>= 1\n        z *= x\n\n    result = 1\n    while y > 0:\n        if y & 1 == 1:\n            result = (result * x) % p\n\n        y >>= 1\n        x = (x * x) % p\n\n    return (z * result) % p\n\n\ndef main() -> None:\n    for n in range(0, 32):\n        print('modp({}, {})'.format(n, 5))\n\n\nif __name__ == '__main__':\n    main()"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if not(char.lower() in vowels):\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "# TODO - your code here\n    s0_set = set(s0)\n    s1_set = set(s1)\n    return len(s0_set & s1_set) == len(s0)"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        raise ValueError('n should be a positive integer.')\n    return __fib_inner__(n - 1, n)\n\n\ndef __fib_inner__(a: int, b: int):\n    if a == 0 or b == 1:\n        return b\n\n    result = __fib_inner__(a - 1, b - 2) + __fib_inner__(a - 2, b - 1)\n    return result"}
{"task_id": "HumanEval/56", "completion": "    open_bracket = brackets.count('<')\n    close_bracket = brackets.count('>')\n\n    if not (open_bracket == close_bracket):\n        return False\n\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if len(stack) <= 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack) != 0:\n        return False\n\n    return True"}
{"task_id": "HumanEval/57", "completion": "# if the list has only one element, it's monotonic\n    if len(l) == 1:\n        return True\n\n    # compare elements and their difference to previous element.\n    # If any element is smaller than previous, this list isn't monotonic.\n    for i in range(len(l)-1):\n        if l[i] < l[i-1]:\n            return False\n    return True"}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/59", "completion": "    def test_largest_prime_factor():\n    assert largest_prime_factor(13195) == 29\n    assert largest_prime_factor(2048) == 2"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "    def integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return integral of this polynomial in the same form.\n    >>> integrate([3, 1, 2, 4, 5])\n    [0, 3, 6, 8, 9]\n    >>> integrate([1, 2, 3])\n    [0, 1, 3, 6]\n    \"\"\""}
{"task_id": "HumanEval/63", "completion": "    def fib_fib(n: int):\n        if n == 0 or n == 1:\n            return 0\n        else:\n            return fib_fib(n - 1) + fib_fib(n - 2) + fib_fib(n - 3)\n\n    return fib_fib(n)"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for i in s:\n        if i in ('a', 'e', 'i', 'o', 'u'):\n            count += 1\n        elif i == 'y':\n            # only when y is at the end of a word, it is considered as a vowel\n            if not s[i+1:]:\n                count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "# Reverse the digits of the input and cast to a string:\n    x = str(x)[::-1]\n    # Cast the shift to an integer in case it's not already:\n    shift = int(shift)\n\n    if len(x) > 0 and shift < len(x):\n        return \"\".join(x[shift:] + x[:shift])\n\n    return \"\".join(x)"}
{"task_id": "HumanEval/66", "completion": "    return sum([ord(c) for c in s if c.isupper()])\n\n\nprint(digitSum(''))"}
{"task_id": "HumanEval/67", "completion": "    result = []\n    for i in s.split():\n        if 'apples' in i:\n            result.append(int(i.replace('apples', '')))\n        elif 'oranges' in i:\n            result.append(int(i.replace('oranges', '')))\n    return n - sum(result)"}
{"task_id": "HumanEval/68", "completion": "    even_nodes = list(filter(lambda node: not node % 2, arr))\n    if len(even_nodes) == 0:\n        return []\n    smallest = min(even_nodes)\n    index = arr.index(smallest)\n    return [smallest, index]\n\n\n# Test cases:\nprint(pluck([4,2,3])) # should be [2,1]\nprint(pluck([1,2,3])) # should be [2,1]\nprint(pluck([]))      # should be []\nprint(pluck([5,0,3,0,4,2]))  # should be [0,1]"}
{"task_id": "HumanEval/69", "completion": "# Sort the list in descending order.\n    lst = sorted(lst)\n\n    # Find the largest number that occurs more than or equal to itself.\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] >= i+1:\n            return lst[i]\n\n    return -1"}
{"task_id": "HumanEval/70", "completion": "    lst.sort()\n    lst = lst[::-1]\n    return lst\n\ndef strange_sort(lst):\n    lst.sort()\n    temp = lst[0]\n    lst[0]= lst[-1]\n    lst[-1] = temp"}
{"task_id": "HumanEval/71", "completion": "# Write your code here\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * (c**2))**0.5/4**0.5, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    if w == None: return False\n    n = len(q) // 2\n    for i in range(n):\n        j = len(q) - i - 1\n        if q[i] + q[j] > w or q[i] != q[j]: return False\n    else: return True"}
{"task_id": "HumanEval/73", "completion": "    if len(arr) < 2:\n        return 0\n\n    def is_palindrome(x):\n        \"\"\"Return True if the given list is a palindrome.\"\"\"\n        n = len(x)\n        for i in range(n // 2):\n            if x[i] != x[n - i - 1]:\n                return False\n        return True\n\n    # Solution 1: Brute Force\n    min_count = float('inf')\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_palindrome(arr[i:j + 1]):\n                return 0\n            else:\n                min_count = min(min_count, (j - i) // 2)\n    return min_count\n\n\ndef test_smallest_change():\n    assert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n    assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id": "HumanEval/74", "completion": "    if not lst1 or not lst2:\n        return lst1 or lst2\n\n    sum1 = sum(len(x) for x in lst1)\n    sum2 = sum(len(x) for x in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n        elif a / i == 3:\n            return True\n\n\ndef check_prime_nums(n):\n    \"\"\"Write a function that checks the first n prime numbers using the Sieve of Eratosthenes.\n    The output should be an array containing all the prime numbers.\"\"\"\n\n    sieve = [True] * (n + 1)\n    for p in range(2, int(n ** .5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return [p for p in range(2, n + 1) if sieve[p]]\n\n\nif __name__ == '__main__':\n    print(is_multiply_prime(30))"}
{"task_id": "HumanEval/76", "completion": "# your code here\n    return x == n ** int(x / n + 0.5)"}
{"task_id": "HumanEval/77", "completion": "    import math\n    return a**3 == abs(a)\n\nprint (iscube(0))  # True\nprint (iscube(-27))   # True\nprint (iscube(8))  # True\nprint (iscube(-4569123))   # False"}
{"task_id": "HumanEval/78", "completion": "    prime_list = [2, 3, 5, 7, 11, 13, 17]\n    key = []\n    for i in range(num.__len__()):\n        if (int(num[i]) in prime_list):\n            key.append(int(num[i]))\n\n    return key.__len__()"}
{"task_id": "HumanEval/79", "completion": "    return 'db' + bin(decimal)[2:] + 'db'"}
{"task_id": "HumanEval/80", "completion": "    if s == \"\":\n        return False\n\n    if len(s) >= 3:\n        for i in range(len(s) - 2):\n            if not (s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]):\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/81", "completion": "    grades = map(float, grades) # Convert all entries to float (necessary for comparison with floats in the table)\n    \n    letter_grades = []\n    \n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade = 'A+'\n        elif grade > 3.7:\n            letter_grade = 'A'\n        elif grade > 3.3:\n            letter_grade = 'A-'\n        elif grade > 3.0:\n            letter_grade = 'B+'\n        elif grade > 2.7:\n            letter_grade = 'B'\n        elif grade > 2.3:\n            letter_grade = 'B-'\n        elif grade > 2.0:\n            letter_grade = 'C+'\n        elif grade > 1.7:\n            letter_grade = 'C'\n        elif grade > 1.3:\n            letter_grade = 'C-'\n        elif grade > 1.0:\n            letter_grade = 'D+'\n        elif grade > 0.7:\n            letter_grade = 'D'\n        else:\n            letter_grade = 'E'\n            \n        letter_grades += [letter_grade] # Append the calculated grade to the list of grades\n        \n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    primes = []\n    \n    for i in string:\n        if len(i) % 2 == 0:\n            return True\n        \n        for j in range(len(string)):\n            \n            if len(j) > 1:\n                primes.append(j)\n\n    return False"}
{"task_id": "HumanEval/83", "completion": "# Counts the number of one-end integers in each length (0 to 9)\n    ones_ends = [0] * 10\n\n    for i in range(n):\n        digits = len(str(i))\n        if str(i)[0] == '1' or str(i)[digits-1] == '1':\n            ones_ends[digits] += 1\n\n    return sum(ones_ends)"}
{"task_id": "HumanEval/84", "completion": "# initialize sum and the result\n    total_sum = 0\n    res = ''\n    # while loop until 1 is less than N\n    while (1):\n        # check if there is remainder\n        if (N % 2 != 0):\n            total_sum += 1\n        # divide by 2 and add to the result\n        res += str(int(N / 2))\n        N = int(N / 2)\n        # exit loop when there is no remainder\n        if (N == 0):\n            break\n    return total_sum, res"}
{"task_id": "HumanEval/85", "completion": "# return None\n    # raise NotImplementedError()\n    total = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/86", "completion": "    return \"\".join([sorted(word, key=lambda x: ord(x)) for word in s.split()])"}
{"task_id": "HumanEval/87", "completion": "    if __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"}
{"task_id": "HumanEval/88", "completion": "    if not array: return []\n\n    result = list(array)\n    sum_ = sum(result[0], result[-1])\n    result.sort() if (sum_ % 2 == 0 or len(result) < 2) else result.sort(reverse=True)\n    return result"}
{"task_id": "HumanEval/89", "completion": "# TODO - your code here!\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    result = []\n    for i in s:\n        if i.lower() in alphabet:\n            x = alphabet.index(i) + 2 * 2\n            y = alphabet[x]\n            result.append(y)\n        else:\n            result.append(i)\n    return \"\".join(result)"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    second = lst[1]\n\n    return second\n\nif __name__ == \"__main__\":\n    print next_smallest([1, 5, 4])"}
{"task_id": "HumanEval/91", "completion": "    return S.count('I')\n\nprint(is_bored(\"I am bored\"))"}
{"task_id": "HumanEval/92", "completion": "    if (type(x) == int and type(y) == int and type(z) == int):\n        if (x == y + z) or (y == x + z) or (z == x + y):\n            return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "# Encodes the string into all capital letters with vowels replaced\n    encoded = []\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n                    index = ord(char) + 2 - 97 # gets the position of vowel in alphabet\n                    char_to_add = chr(index)\n                else:\n                    char_to_add = char.upper()\n            elif char.isupper():\n                if char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U':\n                    index = ord(char) + 2 - 65 # gets the position of vowel in alphabet\n                    char_to_add = chr(index)\n                else:\n                    char_to_add = char.lower()\n            encoded.append(char_to_add)\n        else:\n            encoded.append(char) # add any special characters to list without changing them\n    return ''.join(encoded) # converts the list of strings into a single string\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message and decodes it by reversing \n    the encoding process in the encode function. Assume only letters.\n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\n    # Decodes the string from upper case back to lower case and vowels are replaced with their original letters\n    decoded = []\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                if char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U':\n                    index = ord(char) - 2 + 65 # gets the position of vowel in alphabet\n                    char_to_add = chr(index)\n                else:\n                    char_to_add = char.lower()\n            elif char.islower():\n                if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n                    index = ord(char) - 2 + 97 # gets the position of vowel in alphabet\n                    char_to_add = chr(index)\n                else:\n                    char_to_add = char.upper()\n            decoded.append(char_to_add)\n        else:\n            decoded.append(char) # add any special characters to list without changing them\n    return ''.join(decoded) # converts the list of strings into a single string"}
{"task_id": "HumanEval/94", "completion": "#Find largest prime\n\n    def is_prime(x):\n        if x == 1:\n            return False\n        for i in range(2, int(x ** .5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    #Sum digits of a number\n\n    def sum_digits(num):\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        return total\n\n    for i in range(len(lst)-1, -1, -1):\n        if is_prime(lst[i]):\n            lst.remove(lst[i])\n        else:\n            lst.pop(i)\n\n    #print(lst)\n\n    return sum_digits(max(lst))\n\ndef skjkasdkd2():\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(int(input()))\n    print(skjkasdkd(l))"}
{"task_id": "HumanEval/95", "completion": "# your code here\n    if not dict:  # empty dictionary\n        return False\n    else:\n        keys = [key for key in dict]\n        keys_lc = [i.lower() for i in keys]\n        keys_uc = [i.upper() for i in keys]\n        if keys == keys_lc or keys == keys_uc:\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/96", "completion": "    return [i for i in range(n) if is_prime(i)]\n\n\ndef is_prime(num):\n    \"\"\"Return True if the number is prime. Otherwise it should return False.\"\"\"\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    else:\n        return True"}
{"task_id": "HumanEval/97", "completion": "    def test_multiply():\n    # Test case 1:\n    assert multiply(148, 412) == 16\n    # Test case 2:\n    assert multiply(19, 28) == 72\n    # Test case 3:\n    assert multiply(2020, 1851) == 0\n    # Test case 4:\n    assert multiply(14, -15) == 20"}
{"task_id": "HumanEval/98", "completion": "# your code here\n    return sum(x in 'AEIOU' and i % 2 == 0 for i, x in enumerate(s))"}
{"task_id": "HumanEval/99", "completion": "# Casting string to float\n    num = float(value)\n\n    if abs(num % 2) < .5:\n        return int(round(num, 0))\n    else:\n        return int(round(num, 0)) + (1 if num > 0 else -1)"}
{"task_id": "HumanEval/100", "completion": "    if n <= 0:\n        raise ValueError('n must be positive')\n\n    return [n] + make_a_pile(next_level_size(n))\n\n\ndef next_level_size(n):\n    \"\"\"\n    Given a number of stones in the previous level, return the number of stones\n    in the next level.\n\n    Examples:\n    >>> next_level_size(3)\n    5\n    >>> next_level_size(5)\n    7\n    >>> next_level_size(7)\n    9\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError('n must be positive')\n\n    return n + 1 if is_odd(n) else n\n\n\ndef is_odd(n):\n    \"\"\"\n    Return True if n is an odd number, False otherwise.\n\n    Examples:\n    >>> is_odd(3)\n    True\n    >>> is_odd(5)\n    False\n    \"\"\"\n\n    return n % 2 != 0"}
{"task_id": "HumanEval/101", "completion": "    return s.split(',') + s.split()"}
{"task_id": "HumanEval/102", "completion": "    if __name__ == \"__main__\":\n    x, y = map(int, input().split())\n    print(choose_num(x, y))"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m+1):\n            sum += i\n        \n        average = sum / (m-n+1)\n\n        rounded = round(average)\n        binary_string = bin(rounded)[:2].replace(\"0b\", \"\")\n        return \"0b\" + binary_string"}
{"task_id": "HumanEval/104", "completion": "    y = set()\n    for i in x:\n        if not any(j%2==0 for j in str(i)):\n            y.add(i)\n    return sorted(list(y))"}
{"task_id": "HumanEval/105", "completion": "    numbers_arr = []\n\n    for element in arr:\n        if (element >= 1 and element <= 9) or element == 0:\n            numbers_arr.append(element)\n\n    if len(numbers_arr) == 0:\n        return []\n\n    sorted_arr = sorted(numbers_arr)\n    reverse_arr = reversed(sorted_arr)\n\n    name_arr = [None] * len(reverse_arr)\n    for i, element in enumerate(reverse_arr):\n        if element == 1:\n            name_arr[i] = \"One\"\n        elif element == 2:\n            name_arr[i] = \"Two\"\n        elif element == 3:\n            name_arr[i] = \"Three\"\n        elif element == 4:\n            name_arr[i] = \"Four\"\n        elif element == 5:\n            name_arr[i] = \"Five\"\n        elif element == 6:\n            name_arr[i] = \"Six\"\n        elif element == 7:\n            name_arr[i] = \"Seven\"\n        elif element == 8:\n            name_arr[i] = \"Eight\"\n        elif element == 9:\n            name_arr[i] = \"Nine\"\n\n    return name_arr"}
{"task_id": "HumanEval/106", "completion": "    def test_f():\n    assert f(1) == [1]\n    assert f(2) == [1, 2]\n    assert f(3) == [1, 2, 6]\n    assert f(4) == [1, 2, 6, 24]\n    assert f(5) == [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "# Find all the Palindrome in range(1, n)\n    palindromes = []\n    for i in range(2, n + 1):\n        rev = int(str(i)[::-1])\n        if i == rev:\n            palindromes.append(rev)\n\n    # Count the number of even and odd Palindrome\n    count_even = 0\n    count_odd = 0\n    for p in palindromes:\n        if p % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "completion": "# TODO: Implement this function using a loop\n    num = 0\n    for i in arr:\n        if i > 0:\n            num += 1\n    return num"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0: return True\n    arr = sorted(arr, reverse=True)\n    max_diff = float('inf')\n    for i in range(n-1):\n        max_diff = min(max_diff, abs(arr[i]-arr[i+1]))\n    \n    if max_diff == 0: return False\n    else: return True"}
{"task_id": "HumanEval/110", "completion": "    lst1_set = set(lst1)\n    for i in range(len(lst2)):\n        if lst2[i] % 2 != 0:\n            continue\n        elif lst2[i] not in lst1_set:\n            continue\n        else:\n            lst1.remove(lst2[i])\n            del lst2[i]\n    return \"YES\" if not any(map(lambda x: x % 2 != 0, lst1)) else \"NO\""}
{"task_id": "HumanEval/111", "completion": ""}
{"task_id": "HumanEval/112", "completion": "# remove all characters in c from s, then check if result is palindrome\n    return (\"\".join([i for i in s if i not in c]),s==s[::-1])"}
{"task_id": "HumanEval/113", "completion": "    count = 0\n    for i in lst:\n        if len(i) > 0:\n            for j in range(len(i)):\n                if int(i[j]) % 2 == 1:\n                    count += 1\n            yield \"the number of odd elements {}n the str{}ng {} of the {}{}put.\".format(count, len(i), i, len(lst), lst[-1][-1])\n        else:\n            yield 'no odd elements in the input'"}
{"task_id": "HumanEval/114", "completion": "pass"}
{"task_id": "HumanEval/115", "completion": "# initialize the max_fill variable to zero\n    max_fill = 0\n\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_fill += math.ceil(1 / grid[i][j])\n    \n    return max_fill"}
{"task_id": "HumanEval/116", "completion": "# convert to binary\n    arr = map(lambda x: bin(x)[2:].zfill(16), arr)\n\n    # count number of ones in each binary string\n    # if equal ones, then sort by decimal value\n    sorted_arr = sorted(arr, key=lambda x: (x.count('1'), int(x, 2)))\n\n    return [int(x, 2) for x in sorted_arr]"}
{"task_id": "HumanEval/117", "completion": "    def is_consonant(char):\n        return char.isalpha() and not char.islower()\n    words = s.split()\n    cons_list = []\n\n    for word in words:\n        if len(word) == n:\n            consonants = 0\n            for letter in word:\n                if is_consonant(letter):\n                    consonants += 1\n            if consonants == n:\n                cons_list.append(word)\n\n    return cons_list"}
{"task_id": "HumanEval/118", "completion": "# your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    word_len = len(word)\n    \n    for i in range(word_len - 1, 0, -1):\n        if word[i].lower() in vowels:\n            return word[i]\n        \n    # no vowel met the condition\n    return closest_vowel"}
{"task_id": "HumanEval/119", "completion": "    count = 0\n    for i in lst:\n        if i == \")\":\n            count -= 1\n            if count < 0:\n                return \"No\"\n        else:\n            count += 1\n    return \"Yes\" if count == 0 else \"No\""}
{"task_id": "HumanEval/120", "completion": "    arr = sorted(arr)[::-1] # O(nlogn)\n    return arr[:k][::-1]"}
{"task_id": "HumanEval/121", "completion": "# Write your code here.\n    total = 0\n    for i in range(len(lst)):\n        if (i + 1) % 2 == 0:\n            total += lst[i]\n    \n    return total"}
{"task_id": "HumanEval/122", "completion": "# Find the position of the first element with more than 2 digits in the first k elements\n    pos = -1\n    for i in range(min(k, len(arr))):\n        if len(str(abs(arr[i]))) > 2:\n            pos = i\n            break\n\n    # Return sum of first k elements with at most two digits\n    return sum(map(int, map(str, arr[:min(pos + 1, k)]))) if pos == -1 else \\\n        sum(map(int, map(str, arr[0:min(k, pos + 1)])))"}
{"task_id": "HumanEval/123", "completion": "    seq = []\n    while n != 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3 * n + 1\n        seq.append(n)\n        \n    return sorted([x for x in seq if x % 2 != 0])"}
{"task_id": "HumanEval/124", "completion": "    import re\n\n    # Check for the correct date format\n    if not re.match(r'^(\\d{2})-(\\d{2})-(\\d{4})$', date):\n        return False\n\n    month, day, year = date.split('-')\n\n    # Check month is between 1 and 12\n    if int(month) < 0 or int(month) > 12:\n        return False\n\n    # Check valid days in each month\n    if int(month) == 1 or int(month) == 3 or int(month) == 5 or \\\n            int(month) == 7 or int(month) == 8 or int(month) == 10 or \\\n            int(month) == 12:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) == 4 or int(month) == 6 or int(month) == 9 or \\\n            int(month) == 11:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            # February is 29 days long in leap years\n            if int(day) < 1 or int(day) > 29:\n                return False\n        else:\n            if int(day) < 1 or int(day) > 28:\n                return False\n    elif int(month) == 2:\n        return False\n\n    # Check year is a four digit number\n    if len(year) != 4:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if txt.count(',') > 0:\n        return [i for i in txt.split(\",\")]\n    else:\n        count = 0\n        for i in range(len(txt)):\n            if ord(txt[i]) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "    if not lst:\n        return True\n    \n    prev = lst[0]\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        elif num == prev:\n            if lst.count(num) > 1:\n                return False\n        prev = num\n    \n    return True"}
{"task_id": "HumanEval/127", "completion": "# Check for no overlap.\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    \n    # Otherwise, there is an intersection. \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    return (\"YES\") if start < end and (end - start) > 1 else \"NO\""}
{"task_id": "HumanEval/128", "completion": "    if not len(arr): return None\n\n    arr = [x for x in map(lambda x: (x, 1) if x > 0 else (x, -1 if x < 0 else 0), arr)]\n\n    signs = iter([1] * len(arr))\n\n    return sum(sum(map(abs, prod)) * sign for prod in zip(*arr) for sign in zip(signs, next(signs)))"}
{"task_id": "HumanEval/129", "completion": "    if not grid or not grid[0]: return []\n\n    n = len(grid)\n    m = len(grid[0])\n\n    visited = [[False for _ in range(m)] for __ in range(n)]\n\n    dp = [float('inf') for _ in range(n * m + 1)]\n    dp[0] = 0\n    heap = [(0, (0, 0))]\n\n    while len(heap) > 0:\n        # print(len(heap))\n        val, (r, c) = heapq.heappop(heap)\n\n        if visited[r][c]: continue\n\n        visited[r][c] = True\n\n        for dr, dc in [(0, -1), (-1, 0), (0, 1), (1, 0)]:\n            nr, nc = r + dr, c + dc\n\n            if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc]:\n                heapq.heappush(heap, (val + grid[nr][nc], (nr, nc)))\n\n        dp[r * m + c] = val\n    \n    if dp[n * m] < float('inf'): return [grid[i // m][i % m] for i in range(dp[n * m])]\n    else: return []"}
{"task_id": "HumanEval/130", "completion": "    def tribonacci(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return [n // 2] + tribonacci(n - 1)\n        else:\n            previous = tribonacci(n - 1)\n            middle = tribonacci(n - 2)\n            next = tribonacci(n + 1)\n            current_value = previous[-1] + middle[-1] + next[0]\n            return previous + [current_value]"}
{"task_id": "HumanEval/131", "completion": "# Find the product of the odd digits using a list comprehension, then return it.\n    return product([x for x in str(n) if int(x) % 2 != 0])"}
{"task_id": "HumanEval/132", "completion": "    nested = 0\n    for char in string:\n        if char == '[':\n            nested += 1\n        elif char == ']':\n            nested -= 1\n        if nested < 0:\n            return False\n    return nested > 0"}
{"task_id": "HumanEval/133", "completion": "    result = []\n    for x in lst:\n        result.append(round(x))\n    return sum([x**2 for x in result])"}
{"task_id": "HumanEval/134", "completion": "    return txt[-1].isalpha() and len(txt.split()) == 1"}
{"task_id": "HumanEval/135", "completion": "# Create a new list which is a copy of the given array but with each element\n    # multiplied by -1. This will allow us to find the largest value in the\n    # array that is less than or equal to the preceding value.\n    arr_copy = [-1 * x for x in arr]\n\n    # Initialize a variable to keep track of the largest index of an element\n    # which is not greater than or equal to the element immediately preceding\n    # it. This will be used as the starting point for our search.\n    largest_index = -1\n\n    # Create a variable to keep track of the current index in the arr_copy list.\n    curr_index = 0\n\n    while(curr_index < len(arr)):\n        # If we have found an element which is not greater than or equal to the\n        # element immediately preceding it then this will be the largest index\n        # of an element which is not greater than or equal to the element\n        # immediately preceding it. So set largest_index to curr_index and break\n        # out of our loop.\n        if(arr_copy[curr_index] <= arr_copy[curr_index - 1]):\n            largest_index = curr_index\n            break\n\n        # Increment the curr_index variable by one so that we can move on to the\n        # next element in the arr_copy list.\n        curr_index += 1\n\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "    lst = [x for x in lst if x >= -1 and x <= 1]\n\n    if not any(lst):\n        return (None, None)\n\n    def check(val):\n        return val > 0\n\n    largest = max([x for x in lst if check(x)]) if check(lst[-1]) else max(lst)\n\n    def check2(val):\n        return val < 0\n\n    smallest = min([x for x in lst if check2(x)]) if check2(lst[0]) else min(lst)\n\n    return (largest, smallest)\n\ndef largest_smallest_integers_one_line(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    return max(x for x in lst if x > 0), min(x for x in lst if x < 0)"}
{"task_id": "HumanEval/137", "completion": "    if a == b:\n        return None\n\n    if isinstance(a, int):\n        if a > b:\n            return a\n        else:\n            return b\n\n    elif isinstance(b, int):\n        if a > b:\n            return a\n        else:\n            return b\n\n    elif isinstance(a, float) or isinstance(a, str) or isinstance(b, float) or isinstance(b, str):\n        if float(a) > float(b):\n            return a\n        else:\n            return b\n\n    else:\n        raise ValueError(\"Incorrect data type\")"}
{"task_id": "HumanEval/138", "completion": "# TODO: Implement this function\n\n    return (n % 2 == 0 and n == (2 + 2 + 2 + 2)) or \\\n        (n % 4 == 0 and n > 2 and n == ((n/4 - 1)*4 + 6))"}
{"task_id": "HumanEval/139", "completion": "    def test_special_factorial():\n    assert special_factorial(4) == 288"}
{"task_id": "HumanEval/140", "completion": "# SOLUTION\n    if text.count(' ') > 1:\n        return text.replace(' ', '-')\n    else:\n        return text.replace(' ', '_')"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3:\n        return \"No\"\n\n    elif not any(i in file_name for i in [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) and \\\n            len(file_name.split(\".\")) == 2:\n\n        if (file_name[0].isalpha() or file_name[0].isupper()) and file_name.split(\".\")[0] not in [\"\"]:\n\n            if file_name.split(\".\")[1].lower() in [\"txt\", \"exe\", \"dll\"]:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""}
{"task_id": "HumanEval/142", "completion": "# My solution:\n    \n    answer = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            answer += lst[i]*lst[i]*lst[i]\n        elif i % 4 == 0 and i % 3 != 0:\n            answer += lst[i]*lst[i]*lst[i]\n    return answer\n\n\n# Example:\ndef sum_squares(lst):\n    # Your code here\n    squares = [x**2 for x in lst if not (x%4 == 0 and x%3 == 0)]\n    cubes = [y**3 for y in lst if x % 4 == 0 or x % 3 != 0]\n    return sum(squares) + sum(cubes)"}
{"task_id": "HumanEval/143", "completion": "    return ' '.join([word for word in sentence.split() if is_prime(len(word))])\n\ndef is_prime(n):\n    \"\"\"\n    Given a number n, you have to check if it is prime or not.\n\n    Example:\n        * 2 = True (it is a prime number)\n        * 3 = True (it is a prime number)\n        * 4 = False (it is not a prime number)\n        * 5 = True (it is a prime number)\n        * 6 = False (it is not a prime number)\n        * 7 = True (it is a prime number)\n        * 8 = False (it is not a prime number)\n        * 9 = True (it is a prime number)\n\n    Note: You have to solve this problem without using any predefined functions.\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/144", "completion": "    numerator_x, denominator_x = x.split(\"/\")\n    numerator_n, denominator_n = n.split(\"/\")\n    if (int(numerator_x) * int(denominator_n)) % (int(numerator_n) * int(denominator_x)):\n        return False\n    else:\n        return True"}
{"task_id": "HumanEval/145", "completion": "    return sorted(nums, key=lambda x: (sum(int(y) for y in str(x)), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "    nums = list(map(lambda x: (x > 10) + ((x // 100 % 10 + x % 10) % 2), nums))\n    return sum(nums)"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(n-2):\n        j=i+1\n        while j<n:\n            k=j+1\n            while k<n and ((a[i]*a[j]+a[j]*a[k]+a[k]*a[i])%3)==0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planet_list = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \n                \"saturn\", \"uranus\", \"neptune\"]\n    list1 = []\n    for i in range(len(planet_list)):\n        if planet_list[i] == planet1.lower():\n            index_planet1 = i\n        elif planet_list[i] == planet2.lower():\n            index_planet2 = i\n\n        if index_planet1 != None and index_planet2 != None:\n            for j in range(index_planet1 + 1, index_planet2):\n                list1.append(planet_list[j])\n    return tuple(sorted(list1))"}
{"task_id": "HumanEval/149", "completion": "    def sort_by_length(lst):\n        return sorted(lst, key=len)\n\n    if len(lst) > 1:\n        lst = [x for x in lst if len(x) % 2 == 0]\n        return sort_by_length(lst)\n    else:\n        return lst[0]\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))"}
{"task_id": "HumanEval/150", "completion": ""}
{"task_id": "HumanEval/151", "completion": "# Your code here\n    res = []\n    if len(lst) == 0:\n        return 0\n    \n    for i in lst:\n        if abs(i - max(lst)) >= min(abs(i - max(lst)), abs(i - min(lst))) :\n            res.append(abs(i - max(lst))*2)\n        elif abs(i - max(lst)) < min(abs(i - max(lst)), abs(i - min(lst))):\n            res.append(abs(i - min(lst))*2)\n        \n    return sum(res)"}
{"task_id": "HumanEval/152", "completion": "# return list(map(lambda x: abs(x[0]-x[1]), zip(game,guess)))\n    return map(lambda x: abs(x[0]-x[1]), zip(game,guess))"}
{"task_id": "HumanEval/153", "completion": "    if len(extensions) == 0:\n        return class_name\n\n    max_extension = extensions[0]\n    min_diff = abs(len(max_extension) - len(max_extension.lower()))\n    \n    for extension in extensions:\n        diff = abs(len(extension) - len(extension.lower()))\n        if diff < min_diff:\n            max_extension = extension\n            min_diff = diff \n\n    return class_name + \".\" + max_extension"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "    count_even = 0\n    count_odd = 0\n\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "completion": "# 0-9 are represented by their own letters in the Roman Numeral system.\n    ones = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    tens = [\n        \"\",\n        \"x\",\n        \"xx\",\n        \"xxx\",\n        \"xl\",\n        \"l\",\n        \"lx\",\n        \"lxx\",\n        \"lxxx\",\n        \"xc\",\n    ]\n    hundredths = [\"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    thousandths = [\n        \"\",\n        \"m\",\n        \"mm\",\n        \"mmm\",\n        \"mcm\",\n        \"cm\",\n        \"cmm\",\n        \"ccc\",\n        \"cdm\",\n        \"dm\",\n    ]\n\n    number_list = list(str(number))\n    mini_roman = []\n    for i in range(len(number_list)):\n        if i == 0:\n            mini_roman.append(ones[int(number_list[i])])\n        elif i == 1:\n            # If the current digit is greater than the one previous, use 'l' or 'm'.\n            if int(number_list[i]) > int(number_list[i - 1]):\n                mini_roman.append(tens[int(number_list[i])])\n                # If not, add 'x' to the end of the last string in the list.\n            else:\n                mini_roman[-1] = ones[int(number_list[i])] + tens[int(number_list[i - 1])]\n        elif i == 2:\n            if int(number_list[i]) > int(number_list[i - 1]):\n                mini_roman.append(hundredths[int(number_list[i])])\n            else:\n                mini_roman[-1] = hundreds[int(number_list[i - 1])] + hundredths[int(number_list[i])]\n        elif i == 3:\n            if int(number_list[i]) > int(number_list[i - 1]):\n                mini_roman.append(thousandths[int(number_list[i])])\n            else:\n                mini_roman[-1] = thousands[int(number_list[i - 1])] + thousandths[int(number_list[i])]\n\n    return \"\".join(mini_roman)"}
{"task_id": "HumanEval/157", "completion": "# Checking if the length of each sides is equal or not\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/158", "completion": "    if __name__ == '__main__':\n    words = [\"string\", \"of\", \"string\"]\n    print (find_max(words))"}
{"task_id": "HumanEval/159", "completion": "    if number < need:\n        return [number + remaining, 0]\n    else:\n        if (number - need) == remaining:\n            return [number, 0]\n        elif (number - need) > remaining:\n            return [number - remaining, 0]\n        else:\n            return [number - need, number - need]"}
{"task_id": "HumanEval/160", "completion": "    result = 0\n    for index in range(len(operand)):\n        if index == 0:\n            result += operand[index]\n        else:\n            if '+' == operator[index-1]:\n                result += operand[index]\n            elif '-' == operator[index-1]:\n                result -= operand[index]\n            elif '*' == operator[index-1]:\n                result *= operand[index]\n            elif '//' == operator[index-1]:\n                result //= operand[index]\n            elif '**' == operator[index - 1]:\n                result **= operand[index]\n    return result\n\nif __name__ == \"__main__\":\n    print(do_algebra(['+', '-', '*'], [2, 3, 4]))"}
{"task_id": "HumanEval/161", "completion": "    def main():\n    s = input()\n    print(solve(s))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/162", "completion": "# vim: set ts=4 sw=4 expandtab :"}
{"task_id": "HumanEval/163", "completion": "    result = []\n\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n\n    return result"}
